#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

int precedence(char op) {
    switch (op) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        case '^':
            return 3;
        default:
            return -1;
    }
}

char* convertInfixToPostfix(char* exp) {
    int size = strlen(exp), top = -1, index = 0;
    char* str = (char*)malloc(size + 1);
    char* stack = (char*)malloc(size * sizeof(char));

    if (str == NULL || stack == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        free(str);
        free(stack);
        return NULL;
    }

    for (int i = 0; i < size; i++) {
        char ch = exp[i];
        if (isalnum(ch)) {
            str[index++] = ch;
        } else if (ch == '(') {
            stack[++top] = ch;
        } else if (ch == ')') {
            while (top != -1 && stack[top] != '(') {
                str[index++] = stack[top--];
            }
            if (top == -1) {
              free(str);
              free(stack);
              return NULL;
            }
            top--;
        } else if (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^') {
            while (top != -1 && precedence(ch) <= precedence(stack[top])) {
                str[index++] = stack[top--];
            }
            stack[++top] = ch;
        }
    }

    while (top != -1) {
        if (stack[top] == '(') {
            free(str);
            free(stack);
            return NULL;
        }
        str[index++] = stack[top--];
    }

    str[index] = '\0';
    free(stack);
    return str;
}

int main() {
    char infix[] = "a+b*(c^d-e)";
    char* postfix = convertInfixToPostfix(infix);

    if (postfix != NULL) {
        printf("Infix expression: %s\n", infix);
        printf("Postfix expression: %s\n", postfix);
        free(postfix);
    } else {
        printf("Error: Invalid infix expression.\n");
    }

    return 0;
}
